
# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

->          /sso                                    sso.Routes

## Misc/System ##

# Map static resources from the /public folder to the /assets URL path
+notiming
GET         /assets/*file                           @controllers.Assets.versioned(path="/public", file: Asset)

# Service health check
GET         /service/gtg                            @controllers.ServiceCheckController.gtg
GET         /service/healthcheck                    @controllers.ServiceCheckController.healthcheck

# Other services
POST        /service/flexipicker                    @controllers.FlexiPickerController.queryJson
GET         /service/clientsearch                   @controllers.ClientSearchController.search(query: String ?= "")
GET         /service/casesearch                     @controllers.CaseSearchController.search
POST        /service/casesearch                     @controllers.CaseSearchController.search
POST        /service/casesearch/:caseKey            @controllers.CaseSearchController.lookup(caseKey: domain.IssueKey)
GET         /service/enquirysearch                  @controllers.EnquirySearchController.search
POST        /service/enquirysearch                  @controllers.EnquirySearchController.search
POST        /service/enquirysearch/:enquiryKey      @controllers.EnquirySearchController.lookup(enquiryKey: domain.IssueKey)

GET         /                                       @controllers.IndexController.home
GET         /closed-enquiries                       @controllers.IndexController.closedEnquiries
GET         /closed-cases                           @controllers.IndexController.closedCases
GET         /at-risk-clients                        @controllers.IndexController.atRiskClients
GET         /confirmed-appointments                 @controllers.IndexController.confirmedAppointments
GET         /attended-appointments                  @controllers.IndexController.attendedAppointments
GET         /cancelled-appointments                 @controllers.IndexController.cancelledAppointments

## Clients ##

GET         /register                               @controllers.registration.RegisterController.form
POST        /register                               @controllers.registration.RegisterController.submit

GET         /messages/:id                           @controllers.ClientMessagesController.messages(id: java.util.UUID)
POST        /messages/:id                           @controllers.ClientMessagesController.addMessage(id: java.util.UUID)
POST        /messages/:id/view                      @controllers.ClientMessagesController.auditView(id: java.util.UUID)
GET         /messages/:id/:fileId                   @controllers.ClientMessagesController.download(id: java.util.UUID, fileId: java.util.UUID)

## Enquiries ##

GET         /enquiry                                @controllers.enquiries.EnquiryController.form()
POST        /enquiry                                @controllers.enquiries.EnquiryController.submit()

## Appointments ##

POST        /appointment/:appointmentKey/accept     @controllers.appointments.AppointmentController.accept(appointmentKey: domain.IssueKey)
POST        /appointment/:appointmentKey/reject     @controllers.appointments.AppointmentController.reject(appointmentKey: domain.IssueKey)

## Teams ##

GET         /team/:teamId                           @controllers.admin.AdminController.teamHome(teamId: String)
GET         /team/:teamId/closed-enquiries          @controllers.admin.AdminController.closedEnquiries(teamId: String)
GET         /team/:teamId/closed-cases              @controllers.admin.AdminController.closedCases(teamId: String)
GET         /team/:teamId/at-risk-clients           @controllers.admin.AdminController.atRiskClients(teamId: String)
GET         /team/:teamId/confirmed-appointments    @controllers.admin.AdminController.confirmedAppointments(teamId: String)
GET         /team/:teamId/attended-appointments     @controllers.admin.AdminController.attendedAppointments(teamId: String)
GET         /team/:teamId/cancelled-appointments    @controllers.admin.AdminController.cancelledAppointments(teamId: String)

GET         /team/client/:universityID                          @controllers.admin.ClientController.client(universityID: warwick.sso.UniversityID)
POST        /team/client/:universityID                          @controllers.admin.ClientController.updateSummary(universityID: warwick.sso.UniversityID)
POST        /team/client/:universityID/invite                   @controllers.admin.ClientController.invite(universityID: warwick.sso.UniversityID)
GET         /team/client/:universityID/registration-history     @controllers.admin.ClientController.registrationHistory(universityID: warwick.sso.UniversityID)

GET         /team/enquiry/:enquiryKey                           @controllers.admin.TeamEnquiryController.messages(enquiryKey: domain.IssueKey)
POST        /team/enquiry/:enquiryKey                           @controllers.admin.TeamEnquiryController.addMessage(enquiryKey: domain.IssueKey)
GET         /team/enquiry/:enquiryKey/close                     @controllers.admin.TeamEnquiryController.redirectToMessages(enquiryKey: domain.IssueKey)
POST        /team/enquiry/:enquiryKey/close                     @controllers.admin.TeamEnquiryController.close(enquiryKey: domain.IssueKey)
GET         /team/enquiry/:enquiryKey/reopen                    @controllers.admin.TeamEnquiryController.redirectToMessages(enquiryKey: domain.IssueKey)
POST        /team/enquiry/:enquiryKey/reopen                    @controllers.admin.TeamEnquiryController.reopen(enquiryKey: domain.IssueKey)
GET         /team/enquiry/:enquiryKey/reassign                  @controllers.admin.TeamEnquiryController.reassignForm(enquiryKey: domain.IssueKey)
POST        /team/enquiry/:enquiryKey/reassign                  @controllers.admin.TeamEnquiryController.reassign(enquiryKey: domain.IssueKey)
GET         /team/enquiry/:enquiryKey/owners                    @controllers.admin.OwnersController.enquiryForm(enquiryKey: domain.IssueKey)
POST        /team/enquiry/:enquiryKey/owners                    @controllers.admin.OwnersController.enquirySubmit(enquiryKey: domain.IssueKey)
POST        /team/enquiry/:enquiryKey/owners/self               @controllers.admin.OwnersController.enquirySubmitSelf(enquiryKey: domain.IssueKey)
GET         /team/enquiry/:enquiryKey/:fileId                   @controllers.admin.TeamEnquiryController.download(enquiryKey: domain.IssueKey, fileId: java.util.UUID)

GET         /team/case/create                       @controllers.admin.CaseController.createSelectTeam(fromEnquiry: Option[domain.IssueKey] ?= None, client: Option[warwick.sso.UniversityID] ?= None)
GET         /team/case/create/:teamId               @controllers.admin.CaseController.createForm(teamId: String, fromEnquiry: Option[domain.IssueKey] ?= None, client: Option[warwick.sso.UniversityID] ?= None)
POST        /team/case/create/:teamId               @controllers.admin.CaseController.create(teamId: String)
GET         /team/case/:caseKey                     @controllers.admin.CaseController.view(caseKey: domain.IssueKey)
GET         /team/case/:caseKey/edit                @controllers.admin.CaseController.editForm(caseKey: domain.IssueKey)
POST        /team/case/:caseKey                     @controllers.admin.CaseController.edit(caseKey: domain.IssueKey)
GET         /team/case/:caseKey/link                @controllers.admin.CaseController.linkForm(caseKey: domain.IssueKey)
POST        /team/case/:caseKey/link                @controllers.admin.CaseController.link(caseKey: domain.IssueKey)
POST        /team/case/:caseKey/link/:id/delete     @controllers.admin.CaseController.deleteLink(caseKey: domain.IssueKey, id: java.util.UUID)
DELETE      /team/case/:caseKey/link/:id            @controllers.admin.CaseController.deleteLink(caseKey: domain.IssueKey, id: java.util.UUID)
POST        /team/case/:caseKey/note                @controllers.admin.CaseController.addNote(caseKey: domain.IssueKey)
GET         /team/case/:caseKey/note/:id            @controllers.admin.CaseController.editNoteForm(caseKey: domain.IssueKey, id: java.util.UUID)
POST        /team/case/:caseKey/note/:id            @controllers.admin.CaseController.editNote(caseKey: domain.IssueKey, id: java.util.UUID)
POST        /team/case/:caseKey/note/:id/delete     @controllers.admin.CaseController.deleteNote(caseKey: domain.IssueKey, id: java.util.UUID)
DELETE      /team/case/:caseKey/note/:id            @controllers.admin.CaseController.deleteNote(caseKey: domain.IssueKey, id: java.util.UUID)
GET         /team/case/:caseKey/close               @controllers.admin.CaseController.closeForm(caseKey: domain.IssueKey)
POST        /team/case/:caseKey/close               @controllers.admin.CaseController.close(caseKey: domain.IssueKey)
POST        /team/case/:caseKey/reopen              @controllers.admin.CaseController.reopen(caseKey: domain.IssueKey)
GET         /team/case/:caseKey/reassign            @controllers.admin.CaseController.reassignForm(caseKey: domain.IssueKey)
POST        /team/case/:caseKey/reassign            @controllers.admin.CaseController.reassign(caseKey: domain.IssueKey)
GET         /team/case/:caseKey/owners              @controllers.admin.OwnersController.caseForm(caseKey: domain.IssueKey)
POST        /team/case/:caseKey/owners              @controllers.admin.OwnersController.caseSubmit(caseKey: domain.IssueKey)
POST        /team/case/:caseKey/owners/self         @controllers.admin.OwnersController.caseSubmitSelf(caseKey: domain.IssueKey)
GET         /team/case/:caseKey/document            @controllers.admin.CaseDocumentController.addDocumentForm(caseKey: domain.IssueKey)
POST        /team/case/:caseKey/document            @controllers.admin.CaseDocumentController.addDocument(caseKey: domain.IssueKey)
GET         /team/case/:caseKey/document/:id        @controllers.admin.CaseDocumentController.download(caseKey: domain.IssueKey, id: java.util.UUID)
POST        /team/case/:caseKey/document/:id/delete @controllers.admin.CaseDocumentController.delete(caseKey: domain.IssueKey, id: java.util.UUID)
DELETE      /team/case/:caseKey/document/:id        @controllers.admin.CaseDocumentController.delete(caseKey: domain.IssueKey, id: java.util.UUID)
POST        /team/case/:caseKey/messages/:client    @controllers.admin.CaseMessageController.addMessage(caseKey: domain.IssueKey, client: warwick.sso.UniversityID)
GET         /team/case/:caseKey/attachments/:fileId @controllers.admin.CaseMessageController.download(caseKey: domain.IssueKey, fileId: java.util.UUID)

GET         /team/appointment/create                @controllers.admin.AppointmentController.createSelectTeam(forCase: Option[domain.IssueKey] ?= None, client: Option[warwick.sso.UniversityID] ?= None)
GET         /team/appointment/create/:teamId        @controllers.admin.AppointmentController.createForm(teamId: String, forCase: Option[domain.IssueKey] ?= None, client: Option[warwick.sso.UniversityID] ?= None)
POST        /team/appointment/create/:teamId        @controllers.admin.AppointmentController.create(teamId: String)
GET         /team/appointment/:appointmentKey       @controllers.admin.AppointmentController.view(appointmentKey: domain.IssueKey)
GET         /team/appointment/:appointmentKey/edit  @controllers.admin.AppointmentController.editForm(appointmentKey: domain.IssueKey)
POST        /team/appointment/:appointmentKey       @controllers.admin.AppointmentController.edit(appointmentKey: domain.IssueKey)

## Admins ##

GET         /admin                                  @controllers.IndexController.redirectToPath(path = "/admin/reports")
GET         /admin/reports                          @controllers.reports.ReportsController.home

## Sysadmins ##

GET         /sysadmin                               @controllers.IndexController.redirectToPath(path = "/sysadmin/masquerade")
GET         /sysadmin/masquerade                    @controllers.sysadmin.MasqueradeController.masquerade

## Fallbacks ##

# Handle trailing slashes in URLs
GET         /*path/                                 @controllers.IndexController.redirectToPath(path: String)

